{
    "$schema": "https://vega.github.io/schema/vega/v3.0.json",
    "autosize": "pad",
    "padding": 5,
    "style": "cell",
    "data": [
        {
            "name": "pts_store"
        },
        {
            "name": "source_0",
            "url": "data/cars.json",
            "format": {
                "type": "json"
            },
            "transform": [
                {
                    "type": "aggregate",
                    "groupby": [
                        "Origin",
                        "Cylinders"
                    ],
                    "ops": [
                        "count"
                    ],
                    "fields": [
                        "*"
                    ],
                    "as": [
                        "count_*"
                    ]
                }
            ]
        }
    ],
    "signals": [
        {
            "name": "x_step",
            "value": 21
        },
        {
            "name": "width",
            "update": "bandspace(domain('x').length, 0.1, 0.05) * x_step"
        },
        {
            "name": "y_step",
            "value": 21
        },
        {
            "name": "height",
            "update": "bandspace(domain('y').length, 0.1, 0.05) * y_step"
        },
        {
            "name": "unit",
            "value": {},
            "on": [
                {
                    "events": "mousemove",
                    "update": "isTuple(group()) ? group() : unit"
                }
            ]
        },
        {
            "name": "pts_x",
            "value": [],
            "on": [
                {
                    "events": {
                        "source": "scope",
                        "type": "mousedown",
                        "filter": [
                            "!event.item || event.item.mark.name !== \"pts_brush\""
                        ]
                    },
                    "update": "[x(unit), x(unit)]"
                },
                {
                    "events": {
                        "source": "window",
                        "type": "mousemove",
                        "consume": true,
                        "between": [
                            {
                                "source": "scope",
                                "type": "mousedown",
                                "filter": [
                                    "!event.item || event.item.mark.name !== \"pts_brush\""
                                ]
                            },
                            {
                                "source": "window",
                                "type": "mouseup"
                            }
                        ]
                    },
                    "update": "[pts_x[0], clamp(x(unit), 0, width)]"
                },
                {
                    "events": {
                        "signal": "pts_scale_trigger"
                    },
                    "update": "[0, 0]"
                },
                {
                    "events": {
                        "signal": "pts_translate_delta"
                    },
                    "update": "clampRange(panLinear(pts_translate_anchor.extent_x, pts_translate_delta.x / span(pts_translate_anchor.extent_x)), 0, width)"
                },
                {
                    "events": {
                        "signal": "pts_zoom_delta"
                    },
                    "update": "clampRange(zoomLinear(pts_x, pts_zoom_anchor.x, pts_zoom_delta), 0, width)"
                }
            ]
        },
        {
            "name": "pts_Cylinders",
            "on": [
                {
                    "events": {
                        "signal": "pts_x"
                    },
                    "update": "pts_x[0] === pts_x[1] ? null : invert(\"x\", pts_x)"
                }
            ]
        },
        {
            "name": "pts_y",
            "value": [],
            "on": [
                {
                    "events": {
                        "source": "scope",
                        "type": "mousedown",
                        "filter": [
                            "!event.item || event.item.mark.name !== \"pts_brush\""
                        ]
                    },
                    "update": "[y(unit), y(unit)]"
                },
                {
                    "events": {
                        "source": "window",
                        "type": "mousemove",
                        "consume": true,
                        "between": [
                            {
                                "source": "scope",
                                "type": "mousedown",
                                "filter": [
                                    "!event.item || event.item.mark.name !== \"pts_brush\""
                                ]
                            },
                            {
                                "source": "window",
                                "type": "mouseup"
                            }
                        ]
                    },
                    "update": "[pts_y[0], clamp(y(unit), 0, height)]"
                },
                {
                    "events": {
                        "signal": "pts_scale_trigger"
                    },
                    "update": "[0, 0]"
                },
                {
                    "events": {
                        "signal": "pts_translate_delta"
                    },
                    "update": "clampRange(panLinear(pts_translate_anchor.extent_y, pts_translate_delta.y / span(pts_translate_anchor.extent_y)), 0, height)"
                },
                {
                    "events": {
                        "signal": "pts_zoom_delta"
                    },
                    "update": "clampRange(zoomLinear(pts_y, pts_zoom_anchor.y, pts_zoom_delta), 0, height)"
                }
            ]
        },
        {
            "name": "pts_Origin",
            "on": [
                {
                    "events": {
                        "signal": "pts_y"
                    },
                    "update": "pts_y[0] === pts_y[1] ? null : invert(\"y\", pts_y)"
                }
            ]
        },
        {
            "name": "pts_scale_trigger",
            "update": "(!isArray(pts_Cylinders) || (invert(\"x\", pts_x)[0] === pts_Cylinders[0] && invert(\"x\", pts_x)[1] === pts_Cylinders[1])) && (!isArray(pts_Origin) || (invert(\"y\", pts_y)[0] === pts_Origin[0] && invert(\"y\", pts_y)[1] === pts_Origin[1])) ? pts_scale_trigger : {}"
        },
        {
            "name": "pts_tuple",
            "on": [
                {
                    "events": [
                        {
                            "signal": "pts_Cylinders"
                        },
                        {
                            "signal": "pts_Origin"
                        }
                    ],
                    "update": "pts_Cylinders && pts_Origin ? {unit: \"\", intervals: [{encoding: \"x\", field: \"Cylinders\", extent: pts_Cylinders}, {encoding: \"y\", field: \"Origin\", extent: pts_Origin}]} : null"
                }
            ]
        },
        {
            "name": "pts_translate_anchor",
            "value": {},
            "on": [
                {
                    "events": [
                        {
                            "source": "scope",
                            "type": "mousedown",
                            "markname": "pts_brush"
                        }
                    ],
                    "update": "{x: x(unit), y: y(unit), extent_x: slice(pts_x), extent_y: slice(pts_y)}"
                }
            ]
        },
        {
            "name": "pts_translate_delta",
            "value": {},
            "on": [
                {
                    "events": [
                        {
                            "source": "window",
                            "type": "mousemove",
                            "consume": true,
                            "between": [
                                {
                                    "source": "scope",
                                    "type": "mousedown",
                                    "markname": "pts_brush"
                                },
                                {
                                    "source": "window",
                                    "type": "mouseup"
                                }
                            ]
                        }
                    ],
                    "update": "{x: pts_translate_anchor.x - x(unit), y: pts_translate_anchor.y - y(unit)}"
                }
            ]
        },
        {
            "name": "pts_zoom_anchor",
            "on": [
                {
                    "events": [
                        {
                            "source": "scope",
                            "type": "wheel",
                            "consume": true,
                            "markname": "pts_brush"
                        }
                    ],
                    "update": "{x: x(unit), y: y(unit)}"
                }
            ]
        },
        {
            "name": "pts_zoom_delta",
            "on": [
                {
                    "events": [
                        {
                            "source": "scope",
                            "type": "wheel",
                            "consume": true,
                            "markname": "pts_brush"
                        }
                    ],
                    "force": true,
                    "update": "pow(1.001, event.deltaY * pow(16, event.deltaMode))"
                }
            ]
        },
        {
            "name": "pts_modify",
            "on": [
                {
                    "events": {
                        "signal": "pts_tuple"
                    },
                    "update": "modify(\"pts_store\", pts_tuple, true)"
                }
            ]
        }
    ],
    "marks": [
        {
            "name": "pts_brush_bg",
            "type": "rect",
            "clip": true,
            "encode": {
                "enter": {
                    "fill": {
                        "value": "#333"
                    },
                    "fillOpacity": {
                        "value": 0.125
                    }
                },
                "update": {
                    "x": [
                        {
                            "test": "data(\"pts_store\").length && data(\"pts_store\")[0].unit === \"\"",
                            "signal": "pts_x[0]"
                        },
                        {
                            "value": 0
                        }
                    ],
                    "y": [
                        {
                            "test": "data(\"pts_store\").length && data(\"pts_store\")[0].unit === \"\"",
                            "signal": "pts_y[0]"
                        },
                        {
                            "value": 0
                        }
                    ],
                    "x2": [
                        {
                            "test": "data(\"pts_store\").length && data(\"pts_store\")[0].unit === \"\"",
                            "signal": "pts_x[1]"
                        },
                        {
                            "value": 0
                        }
                    ],
                    "y2": [
                        {
                            "test": "data(\"pts_store\").length && data(\"pts_store\")[0].unit === \"\"",
                            "signal": "pts_y[1]"
                        },
                        {
                            "value": 0
                        }
                    ]
                }
            }
        },
        {
            "name": "marks",
            "type": "rect",
            "style": [
                "rect"
            ],
            "from": {
                "data": "source_0"
            },
            "encode": {
                "update": {
                    "x": {
                        "scale": "x",
                        "field": "Cylinders"
                    },
                    "width": {
                        "scale": "x",
                        "band": true
                    },
                    "y": {
                        "scale": "y",
                        "field": "Origin"
                    },
                    "height": {
                        "scale": "y",
                        "band": true
                    },
                    "fill": [
                        {
                            "test": "!(length(data(\"pts_store\"))) || (vlInterval(\"pts_store\", datum))",
                            "scale": "color",
                            "field": "count_*"
                        },
                        {
                            "value": "grey"
                        }
                    ]
                }
            }
        },
        {
            "name": "pts_brush",
            "type": "rect",
            "clip": true,
            "encode": {
                "enter": {
                    "fill": {
                        "value": "transparent"
                    },
                    "stroke": {
                        "value": "white"
                    }
                },
                "update": {
                    "x": [
                        {
                            "test": "data(\"pts_store\").length && data(\"pts_store\")[0].unit === \"\"",
                            "signal": "pts_x[0]"
                        },
                        {
                            "value": 0
                        }
                    ],
                    "y": [
                        {
                            "test": "data(\"pts_store\").length && data(\"pts_store\")[0].unit === \"\"",
                            "signal": "pts_y[0]"
                        },
                        {
                            "value": 0
                        }
                    ],
                    "x2": [
                        {
                            "test": "data(\"pts_store\").length && data(\"pts_store\")[0].unit === \"\"",
                            "signal": "pts_x[1]"
                        },
                        {
                            "value": 0
                        }
                    ],
                    "y2": [
                        {
                            "test": "data(\"pts_store\").length && data(\"pts_store\")[0].unit === \"\"",
                            "signal": "pts_y[1]"
                        },
                        {
                            "value": 0
                        }
                    ]
                }
            }
        }
    ],
    "scales": [
        {
            "name": "x",
            "type": "band",
            "domain": {
                "data": "source_0",
                "field": "Cylinders",
                "sort": true
            },
            "range": {
                "step": {
                    "signal": "x_step"
                }
            },
            "paddingInner": 0.1,
            "paddingOuter": 0.05
        },
        {
            "name": "y",
            "type": "band",
            "domain": {
                "data": "source_0",
                "field": "Origin",
                "sort": true
            },
            "range": {
                "step": {
                    "signal": "y_step"
                }
            },
            "paddingInner": 0.1,
            "paddingOuter": 0.05
        },
        {
            "name": "color",
            "type": "sequential",
            "domain": {
                "data": "source_0",
                "field": "count_*"
            },
            "range": "heatmap",
            "nice": false,
            "zero": false
        }
    ],
    "axes": [
        {
            "scale": "x",
            "orient": "bottom",
            "labelOverlap": true,
            "title": "Cylinders",
            "zindex": 1,
            "encode": {
                "labels": {
                    "update": {
                        "angle": {
                            "value": 270
                        },
                        "align": {
                            "value": "right"
                        },
                        "baseline": {
                            "value": "middle"
                        }
                    }
                }
            }
        },
        {
            "scale": "y",
            "orient": "left",
            "labelOverlap": true,
            "title": "Origin",
            "zindex": 1
        }
    ],
    "legends": [
        {
            "fill": "color",
            "title": "Number of Records",
            "type": "gradient"
        }
    ],
    "config": {
        "axisY": {
            "minExtent": 30
        }
    }
}
